-------------------------------------------------------------------------------------------------

                MANIPULAÇÕES DE DADOS

        '+' serve para Concatenação
       (number + number) para adição
       (string + string) para concatenação

       
        n = Valor que quer colocar dentro do parêntese

=================================================================================================

        Converção de string para number: 

        -  Number.parseInt(n) -> Número Inteiro
         var n1 = Number.parseInt(window.prompt('Digite um número:'))

        - Number.parseFloat(n) -> Número Real (Que possui ponto flutuante)
         var n1 = Number.parseFloat(window.prompt('Digite um número:'))

        - Simplificação : Number(n)
         var n1 = Number(window.prompt('Digite um número:'))

=======================================================================================================

        Converção de number para string: 

        - n.toString()
        window.alert(`A soma dos valore é ${s.toString}`)

        - simplicação: String(n)
        window.alert(`A soma dos valore é ${String(s)}`)

===================================================================================================

        Formatando string

        var s = 'JavaScript'

        'Eu estou aprendendo s' -> Não faz interpolação
        'Eu estou aprendendo' + s -> Usa concatenação
        `Eu estou aprendendo ${s}` -> Usa template string

        var s = 'JavaScript'

        s.length -> Quantos carecteres a string tem
        s.toUperCade() -> Tudo para 'MAIÚSCULAS'
        s.toLowerCase() -> Tudo para 'minúsculas'

-----------------------------------------------------------------------------------------------------------------------------

                FORMATANDO NÚMEROS

            var n1 = 1545.5

            n1 = 1545.5

            n1.toFixed(2) = 1545.50 -> Acrescenta mais um valor

            n1.toFixes(2).replace('.', ',') = 1545,50 -> Troca o ponto pela vírgula

            n1.toLocaleString('pt-BR', {style: 'currency', currency: 'BRL'}) = R$ 1.545,50 -> Transforma em Reais

            n1.toLocaleString('pt-BR', {style: 'currency', currency: 'USD'}) = US$ 1.545,50 -> Transforma em Dolar

            n1.toLocaleString('pt-BR', {style: 'currency', currency: 'EUR'}) = € 1.545,50 -> Transforma em Euro

-----------------------------------------------------------------

                OPERADORES      

        - aritméticos -> Usados para fazer conta -> 5 '+' 2 = 7
                                                    5 '-' 2 = 3
                                                    5 '*' 2 = 10
                                                    5 '/' 2 = 2.5
                                                    5 '%' 2  = 1 
                                                    5 '**' 2 = 25

        /* '%' é o resto da divisão inteira (EX: 5 dividido por 2 da 2.5, mas o resto dessa divisão é 1 por faltar apenas o 1 para completar a divisão) */

        /* ** -> significa potencia */

        /*
        
           Ordem de precedencia:

           1° - ()
           2° - **
           3° - *, /, %
           4° - +, - 
        */

---------------------------------------------------------------------------------------------------------

        - atribuição ->

           Atribuição simples:

           var a = 5 + 3 = 8
           var b = a % 5 = 3
           var c = 5 * b ** 2 = 45
           var d = 10 - a / 2 = 6
           var e = 6 * 2 / d = 2
           var f = b % e + 4 e = 3

           Auto-atribuições:

           var n = 3
           n = n + 4 = 7
           n = n - 5 = 2
           n = n * 4 = 8
           n = n / 2 = 4
           n = n ** 2 = 16
           n = n % 5 = 1

           Simplificando (Só pode simplificar se for a mesma variavel, n = x + 4 não poderia ocorrer uma simplificação por naõ ter a mesma variavel.):
           
           n +=4
           n -= 5
           n *= 4
           n /= 2
           n **= 2
           n %= 5

        /*
           Incremento:

           var x = 5
           var = x +1 = 6 -> x ++
           var = x-1 = 5 -> x --
        */        

--------------------------------------------------------------------------------------------------------------

        - relacionais -> Toda expressão que tiver um operador relacional, terá como resultado um valor booleano (true - false). Não possuem ordem de precedência

        
                Operadores Relacionais:

                > -> Maior
                < -> Menor
                >= -> Maior ou Igual
                <= -> Menor ou Igual 
                == -> Igual
                != -> Diferente

                Ex: 

                5 > 2 = true
                7 < 4 = false
                8 >= 8 = true
                9 <= 7 = false
                5 == 5 = true
                4 != 4 = false

                Ex2:

                preço >= 200.5            // o preço é maior ou igual a 200.50?
                idade < 18               // a idade é menor do que 18?
                curso == 'JavaScript'   // o curso é JavaScript?
                n1 != n2               // o primeiro número é diferente do segundo?

                Operadores Relacionais de identdade:

                 === -> Identicos
                 !== -> Desigual restrito -> Tipos diferentes mas valor interno é o mesmo

                Ex:

                 5 === '5' = false
                 5 === 5 = true
                 5 != '5' = false
                 5 !== '5' = true
        

-------------------------------------------------------------------------------------------------------------------

        - lógicos -> Toda expressão que tiver um operador lógico, terá como resultado um valor booleano (true - false).

        
                Operadores Lógicos:

                ! -> Negação -> Não
                && -> Conjunção -> E
                || -> Disjunção -> Ou

                Ordem de Precedência:

                1° !
                2° &&
                3° ||

                Negação(!):

                Depois da ! só posso ter um resultado: true, false ou uma expressão em que o resultado é true ou false.

                ! true -> false
                ! false -> true

                Conjunção(&&, Conectivo: E):

                Depois dos && só posso ter dois valores: true ou false

                true && true -> true
                true && false -> false
                false && true -> false
                false && false -> false

                Disjunção(||, Concetivo: OU):

                Depois || só pode ter dois valores: true ou false

                true || true -> true
                true || false -> true
                false || true -> true
                false || false -> false

                Ex: 

                idade >= 15 && idade <= 17             // a idade está entre 15 e 17?
                estado == 'RJ' || estado == 'SP'      // o estado é RJ ou SP?
                salário > 1500 && sexo != 'M'        // o salário é acima de 1500 e não é um homem?
        

--------------------------------------------------------------------------------------------------------------------------

        - ternário ->

        
                Operadores ternários:

                ? -> O  qua vai acontecer quando o teste lógico for verdadeiro
                : -> O que vai acontecer quando o teste lógico for falso

                Ex:

                média >= 7.0 ? "Aprovado" : "Reprovado" -> 

                média = 5.5
                média > 7 = Reprovado
        
        /*
                Ordem de Precedência:

                1° - Aritmético
                2° - Relacionais
                3° - Lógicos
                4° - ternário 
        */

===========================================================================================================================

DOM -> Document Object Model -> Permite acesso aos compomentes internos do website. 

-------------------------------------------------------------------------------------------------------------------------------

Árvore DOM:

1° window
2° location, document, history e etc...

--------------------------------------------------------------------------------------------------------------------------------

window -> Janela
location -> Localização do site
document -> documento atual
history -> de onde você veio, aonde você vai, ajuda na navegação

----------------------------------------------------------------------------------------------------------------------------

Dentro deum document exite um HTML e que tem dois filhos chamados HEAD e BODY. Dentro dessas tags (head e body) exitem outras tags como por exemplo as tags meta e tittle que são filhas de heade, e header e main que são filhas do body.

---------------------------------------------------------------------------------------------------------------------------

É possivel selecionar os elementos por meio de Marca, ID, Nome, Classe e Seletor.

Marca -> getElementsByTagName()

ID -> getElemtsByid()

Nome -> getElementsByName()

Classe -> getElementsByClassName()

Seletor -> querySelector() -> Singular
           querySelectorAll() -> Plural

---------------------------------------------------------------------------------------------------------------------------

- Marca:
        var corpo = window.document.body
        corpo.style.background = 'black'

        var p1 = window.document.getElementsByTagName('p')[0]
        document.write('Está escrito assim:' + p1.innerText)

- ID:
        var d = window.document.getElementById('msg')
        d.style.background = 'green'
        d.innerText = 'Estou aguardando...'
        window.document.getElementById('msg').innerText = 'Olá'

- Name:
        var d = window.document.getElementsByName('msg') [0]
        d.innerText = 'Olá!'
        
- Class:
         var d = window.document.getElementsByClassName('msg') [0]
        d.innerText = 'Olá!'

- Seletor:

        Id:
        var d = window.document.querySelector('div#msg')
        d.innerHTML = 'Olá!'
        
        Class:
        var d = window.document.querySelector('div.msg')
        d.innerHTML = 'Olá!'

---------------------------------------------------------------------------------------------------------

Eventos DOM:

Um evento é tudo aquilo que pode aconter com por exemplo uma div. 

---------------------------------------------------------------------------------------------------------

Função é um conjunto de códigos que vão ser excutadas apenas quando o evento ocorrer.

Um bloco em JavaScript é delimitado por chaves ( {} ) 

Esse bloco tem que ser nomeado por uma function (Significa função), e esse nomes gerealmente são ações que fazemos, depois do nome da function é obrigatório colocar parenteses, e dentro desses parenteses opcionalmente é possivel colocar alguns parametros.

Ex (ex009 e ex010):

function ação() {

}

===============================================================================================================

Condições

uma cindição pode ter duas direções. São executadas de modo diferente, mas chega no resultado final do mesmo geito.

(Está é um condição) if (condição) {

} (Está  é outra condição) else {

}

if -> significa SE

else -> significa SE NÃO

------------------------------------------------------------------------------------------------------------------

Tipos de Condição

1° Condição Simples -> Só possui um único bloco;

2° Condição Composta -> Se a condição for verdadeira terá algo para fazer, mas se a condição for falsa terá outra coisa para fazer.

---------------------------------------------------------------------------------------------------------------------

Condição Aninhda

É possivel colocar outra condição dentro de uma condição

Ex: if (cond1) {
        bloco1
} else {
        if (cond2) {
                bloco2
        } else {
                bloco3
        }
}

------------------------------------------------------------------------------------------------------------------------

Condição Múltipla

Serve para valores fixos.
Existe a possibilidade de outros valores(fixos).

É obrigatório o uso do 'break' no final de cada bloco do case.

switch (expressão) {
        case valor 1:
                bloco1
                break

        case valor 2:
                bloco2
                break

        case valor 3:
                bloco3
                break
                
        default:
                bloco4
                break(Opcional)
}

=============================================================================================================================

Criação do img pelo JS dinamicamente

var img = document.createElement('img') -> Criou uma 'tag' img

img.setAttribute('id', 'foto') -> Adicionou um id chamado foto

img.setAttribute('src', 'nome do arquivo') -> Adicionou um atributo src com o nome da imagem

============================================================================================================================

Repetições

while -> Teste Lógico primeiro, para em seguida realizar o bloco, depois volta para o teste lógico e realiza o bloco novamente;

do -> Bloco efetuado primeiro, para em seguida realizar o teste lógico, depois volta para o bloco e realiza o teste lógico novamente;

for -> Realiza primeiro a inicialização, o teste lógico e o incremento, para em seguida realizar o bloco, depois ele volta para o incremento e realiza o bloco novamente. 

----------------

Estrutura:

While:

while (condição) {

}

------------

Do: 

do {

} while (condição)

-------------

For:

for (incio; teste; incremento) {

}

Ex for;

for (var c = 1;  c <= 10; c++) {
        //bloco-função
}


=============================================================================================================================

Variáveis simples -> Só conseguem armazenar um valor por vez.

Variáveis compostas -> Devem ser capazes de armazenar vários valores em uma mesma estrutura.

array -> vetor

índice -> chave, chaves começam pelo número, então se tiver um vetor com 10 elementos o primeiro indice será 0.

Um vetor é uma variável que tem vários elementos, cada elemento é composto por seu valor e por uma chave de identificação.

EX:

let num = [ 5, 8, 4,]

5 possui indice 0
8 possui indice 1
4 possui indice 2

